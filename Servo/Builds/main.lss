
Builds/main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  0000010e  00000182  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000010e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .stab         0000063c  00000000  00000000  00000184  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000e6f  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .comment      00000011  00000000  00000000  0000162f  2**0
                  CONTENTS, READONLY
  5 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001640  2**2
                  CONTENTS, READONLY
  6 .debug_info   000005f4  00000000  00000000  00001680  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000005a2  00000000  00000000  00001c74  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000001d  00000000  00000000  00002216  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000208  00000000  00000000  00002233  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 40 00 	call	0x80	; 0x80 <main>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <main>:

//We need to use the 16bit register. makes sensesince we  are dealing iwth numbers bigger than 255!
// FAST pwm and we will use a top value! justl ike OCR1A for 8 bit

int main(void) {
    DDRB |= _BV(PB1);
  80:	21 9a       	sbi	0x04, 1	; 4
    TCCR1A |= 1<<WGM11 | 1<<COM1A1 | 1<<COM1A0;
  82:	80 91 80 00 	lds	r24, 0x0080
  86:	82 6c       	ori	r24, 0xC2	; 194
  88:	80 93 80 00 	sts	0x0080, r24
    TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS11;
  8c:	80 91 81 00 	lds	r24, 0x0081
  90:	8a 61       	ori	r24, 0x1A	; 26
  92:	80 93 81 00 	sts	0x0081, r24
    ICR1 = 9999; //need this!!! to get to be the correct 16bit. fuckkkkk
  96:	8f e0       	ldi	r24, 0x0F	; 15
  98:	97 e2       	ldi	r25, 0x27	; 39
  9a:	90 93 87 00 	sts	0x0087, r25
  9e:	80 93 86 00 	sts	0x0086, r24
  a2:	8b e0       	ldi	r24, 0x0B	; 11
  a4:	90 e0       	ldi	r25, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  a6:	2f ef       	ldi	r18, 0xFF	; 255
  a8:	34 e3       	ldi	r19, 0x34	; 52
  aa:	4c e0       	ldi	r20, 0x0C	; 12
  ac:	21 50       	subi	r18, 0x01	; 1
  ae:	30 40       	sbci	r19, 0x00	; 0
  b0:	40 40       	sbci	r20, 0x00	; 0
  b2:	e1 f7       	brne	.-8      	; 0xac <main+0x2c>
  b4:	00 c0       	rjmp	.+0      	; 0xb6 <main+0x36>
  b6:	00 00       	nop
    //the math to get that is you do 50hz = system clock/ (2*prescale (i used 8) * TOP) and TOP = IC1 thi is from the Mil.ufl link! works.
    
//
    for(int i= 0; i<=10; i++){
        _delay_ms(500);
    OCR1A = ICR1 - 2000; //18000
  b8:	20 91 86 00 	lds	r18, 0x0086
  bc:	30 91 87 00 	lds	r19, 0x0087
  c0:	20 5d       	subi	r18, 0xD0	; 208
  c2:	37 40       	sbci	r19, 0x07	; 7
  c4:	30 93 89 00 	sts	0x0089, r19
  c8:	20 93 88 00 	sts	0x0088, r18
  cc:	2f ef       	ldi	r18, 0xFF	; 255
  ce:	34 e3       	ldi	r19, 0x34	; 52
  d0:	4c e0       	ldi	r20, 0x0C	; 12
  d2:	21 50       	subi	r18, 0x01	; 1
  d4:	30 40       	sbci	r19, 0x00	; 0
  d6:	40 40       	sbci	r20, 0x00	; 0
  d8:	e1 f7       	brne	.-8      	; 0xd2 <main+0x52>
  da:	00 c0       	rjmp	.+0      	; 0xdc <main+0x5c>
  dc:	00 00       	nop
    
    _delay_ms(500);
    
    OCR1A = ICR1 - 1000; //1000 milisecond
  de:	20 91 86 00 	lds	r18, 0x0086
  e2:	30 91 87 00 	lds	r19, 0x0087
  e6:	28 5e       	subi	r18, 0xE8	; 232
  e8:	33 40       	sbci	r19, 0x03	; 3
  ea:	30 93 89 00 	sts	0x0089, r19
  ee:	20 93 88 00 	sts	0x0088, r18
  f2:	2f ef       	ldi	r18, 0xFF	; 255
  f4:	34 e3       	ldi	r19, 0x34	; 52
  f6:	4c e0       	ldi	r20, 0x0C	; 12
  f8:	21 50       	subi	r18, 0x01	; 1
  fa:	30 40       	sbci	r19, 0x00	; 0
  fc:	40 40       	sbci	r20, 0x00	; 0
  fe:	e1 f7       	brne	.-8      	; 0xf8 <main+0x78>
 100:	00 c0       	rjmp	.+0      	; 0x102 <main+0x82>
 102:	00 00       	nop
 104:	01 97       	sbiw	r24, 0x01	; 1
    TCCR1B |= 1<<WGM13 | 1<<WGM12 | 1<<CS11;
    ICR1 = 9999; //need this!!! to get to be the correct 16bit. fuckkkkk
    //the math to get that is you do 50hz = system clock/ (2*prescale (i used 8) * TOP) and TOP = IC1 thi is from the Mil.ufl link! works.
    
//
    for(int i= 0; i<=10; i++){
 106:	79 f6       	brne	.-98     	; 0xa6 <main+0x26>
 108:	ff cf       	rjmp	.-2      	; 0x108 <main+0x88>

0000010a <_exit>:
 10a:	f8 94       	cli

0000010c <__stop_program>:
 10c:	ff cf       	rjmp	.-2      	; 0x10c <__stop_program>
